"use strict";var t,e=(t=require("fs"))&&"object"==typeof t&&"default"in t?t.default:t;const s=(t={},e={})=>{const s=[...new Set([...t.testResults.map(t=>t.testFilePath.split("/")[t.testFilePath.split("/").length-1]),...e.testResults.map(t=>t.testFilePath.split("/")[t.testFilePath.split("/").length-1])])];return{startTime:t.startTime||e.startTime,updated:Math.round((new Date).getTime()),testResults:s.map(s=>e.testResults.find(t=>t.testFilePath.endsWith(s))&&t.testResults.find(t=>t.testFilePath.endsWith(s))?{...t.testResults.find(t=>t.testFilePath.endsWith(s)),...e.testResults.find(t=>t.testFilePath.endsWith(s)),updated:Math.round((new Date).getTime())}:!e.testResults.find(t=>t.testFilePath.endsWith(s))&&t.testResults.find(t=>t.testFilePath.endsWith(s))?t.testResults.find(t=>t.testFilePath.endsWith(s)):{...e.testResults.find(t=>t.testFilePath.endsWith(s)),created:Math.round((new Date).getTime())})}};module.exports=class{constructor(t,s){this.globalConfig=t,this.options=s,this.report=e.existsSync(s.filename)?JSON.parse(e.readFileSync(s.filename,"utf8")):{testResults:[]}}onRunComplete(t,i){var n;this.report={...this.report,...s(this.report,i)},this.report={...this.report,...(n=this.report,{numFailedTestSuites:n.testResults.filter(t=>t.numFailingTests>0).length,numFailedTests:n.testResults.reduce((t,e)=>t+e.numFailingTests,0),numPassedTestSuites:n.testResults.filter(t=>t.numPassingTests>0).length,numPassedTests:n.testResults.reduce((t,e)=>t+e.numPassingTests,0),numPendingTestSuites:n.testResults.filter(t=>t.numPendingTests>0).length,numPendingTests:n.testResults.reduce((t,e)=>t+e.numPendingTests,0),numTotalTestSuites:n.testResults.filter(t=>t.numTodoTests>0).length,numTodoTests:n.testResults.reduce((t,e)=>t+e.numTodoTests,0),numTotalTests:n.testResults.reduce((t,e)=>t+e.numFailingTests+e.numPassingTests,0)})},e.writeFileSync(this.options.filename,JSON.stringify(this.report))}};
